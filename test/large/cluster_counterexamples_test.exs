defmodule BreakingPP.CounterExamplesTest do
  use ExUnit.Case
  import BreakingPP.Test.{Cluster, Eventually}

  @tag timeout: :infinity
  test "counterexample 1" do
    cluster_started(3)
    sessions1 = connect_sessions(
      [{2, "189044"}, {1, "189043"}, {2, "189042"}, {2, "189041"},
        {1, "189040"}, {1, "189039"}, {2, "189038"}, {3, "189037"}, {3, "189036"},
        {2, "189035"}, {2, "189034"}, {1, "189033"}, {3, "189032"}, {3, "189031"},
        {2, "189030"}, {3, "189029"}, {2, "189028"}, {3, "189027"}, {1, "189026"},
        {2, "189025"}, {2, "189024"}, {3, "189023"}, {1, "189022"}, {3, "189021"},
        {2, "189020"}, {3, "189019"}, {3, "189018"}, {3, "189017"}, {2, "189016"},
        {1, "189015"}, {3, "189014"}, {3, "189013"}, {3, "189012"}, {1, "189011"},
        {1, "189010"}, {1, "189009"}, {1, "189008"}, {1, "189007"}, {1, "189006"},
        {1, "189005"}, {2, "189004"}, {2, "189003"}, {2, "189002"}, {1, "189001"},
        {1, "189000"}, {1, "188999"}, {2, "188998"}, {3, "188997"}, {3, "188996"},
        {2, "188995"}, {1, "188994"}, {2, "188993"}, {3, "188992"}, {1, "188991"},
        {1, "188990"}, {3, "188989"}, {2, "188988"}, {3, "188987"}, {2, "188986"},
        {3, "188985"}, {1, "188984"}, {2, "188983"}, {2, "188982"}, {1, "188981"},
        {3, "188980"}, {2, "188979"}, {3, "188978"}, {3, "188977"}, {3, "188976"},
        {1, "188975"}, {3, "188974"}, {2, "188973"}, {1, "188972"}, {1, "188971"},
        {1, "188970"}, {3, "188969"}, {1, "188968"}, {1, "188967"}, {3, "188966"},
        {3, "188965"}, {2, "188964"}, {3, "188963"}, {2, "188962"}, {2, "188961"},
        {3, "188960"}, {1, "188959"}, {2, "188958"}, {2, "188957"}, {2, "188956"},
        {1, "188955"}, {1, "188954"}, {2, "188953"}, {2, "188952"}, {3, "188951"},
        {2, "188950"}, {2, "188949"}, {2, "188948"}, {3, "188947"}, {3, "188946"},
        {2, "188945"}, {2, "188944"}, {3, "188943"}, {2, "188942"}, {2, "188941"},
        {3, "188940"}, {2, "188939"}, {2, "188938"}, {3, "188937"}, {2, "188936"},
        {2, "188935"}, {1, "188934"}, {3, "188933"}, {2, "188932"}, {1, "188931"},
        {3, "188930"}, {1, "188929"}, {3, "188928"}, {3, "188927"}, {1, "188926"},
        {2, "188925"}, {2, "188924"}, {2, "188923"}, {1, "188922"}, {2, "188921"},
        {2, "188920"}, {3, "188919"}, {3, "188918"}, {2, "188917"}, {1, "188916"},
        {3, "188915"}, {3, "188914"}, {2, "188913"}, {2, "188912"}, {1, "188911"},
        {3, "188910"}, {1, "188909"}, {1, "188908"}, {1, "188907"}, {1, "188906"},
        {1, "188905"}, {3, "188904"}, {1, "188903"}, {3, "188902"}, {1, "188901"},
        {1, "188900"}, {1, "188899"}, {1, "188898"}, {3, "188897"}, {2, "188896"},
        {2, "188895"}, {1, "188894"}, {3, "188893"}, {1, "188892"}, {2, "188891"},
        {1, "188890"}, {3, "188889"}, {1, "188888"}])
    assert eventually(fn ->
      session_ids_on_nodes_are_equal_to(sessions1, [1,2,3])
    end)

    node_stopped(3)
    sessions2 = sessions_without_node(sessions1, 3)
    assert eventually(fn ->
      session_ids_on_nodes_are_equal_to(sessions2, [1,2])
    end)

    sessions3 = disconnect_sessions(sessions2,
      [{1, "189040"}, {2, "189025"}, {1, "188899"}, {1, "188906"},
        {2, "188942"}, {2, "189042"}, {2, "188986"}, {2, "188854"},
        {2, "188895"}, {2, "188825"}, {1, "188907"}, {1, "189026"},
        {1, "188888"}, {1, "188970"}, {1, "188908"}, {2, "188896"},
        {1, "188864"}, {1, "188990"}, {1, "188984"}, {2, "188962"},
        {2, "188855"}, {2, "188920"}, {1, "188916"}, {2, "189038"},
        {2, "188836"}, {1, "188929"}, {1, "188954"}, {1, "188892"},
        {2, "188952"}, {1, "188955"}, {2, "188826"}, {2, "188936"},
        {2, "188944"}, {1, "189010"}, {1, "188833"}, {2, "188842"},
        {2, "188957"}, {2, "188912"}, {1, "188874"}, {2, "188998"},
        {1, "189001"}, {1, "188909"}, {2, "188879"}, {1, "189039"},
        {2, "188958"}, {2, "188823"}, {1, "188900"}, {2, "188891"},
        {2, "188871"}, {2, "188932"}, {2, "189030"}, {1, "188981"},
        {1, "189009"}, {2, "188982"}, {2, "188935"}, {2, "188863"},
        {2, "188961"}, {2, "189041"}, {1, "189015"}, {1, "188972"},
        {2, "189016"}, {2, "189035"}, {2, "188964"}, {2, "188953"},
        {2, "189028"}, {1, "188934"}, {1, "188898"}, {2, "189004"},
        {1, "188975"}, {2, "188973"}, {2, "188941"}, {1, "188971"},
        {1, "188868"}, {1, "188999"}, {2, "188995"}, {1, "188905"},
        {2, "188860"}, {2, "189024"}, {2, "188913"}, {1, "189022"},
        {2, "188835"}, {1, "189006"}, {1, "188824"}, {2, "188988"},
        {1, "188959"}, {2, "188979"}, {1, "189043"}, {2, "188948"},
        {1, "188894"}, {1, "188968"}, {1, "188886"}, {2, "188950"},
        {2, "188993"}, {1, "189008"}, {1, "188827"}, {1, "188873"},
        {1, "189005"}, {2, "188870"}])
    assert eventually(fn ->
      session_ids_on_nodes_are_equal_to(sessions3, [1,2])
    end)

    node_stopped(1)
    sessions4 = sessions_without_node(sessions3, 1)
    assert eventually(fn ->
      session_ids_on_nodes_are_equal_to(sessions4, [2])
    end)

    node_started(3)
    assert eventually(fn ->
      session_ids_on_nodes_are_equal_to(sessions4, [2,3])
    end, 60, 1_000)
  end

  defp connect_sessions(nodes_ids) do
    Enum.map(nodes_ids, fn {n, id} ->
      {n, id, session_connected(node_map(n), id)}
    end)
  end

  defp disconnect_sessions(sessions, disconnect_nodes_ids) do
    Enum.flat_map(sessions, fn {n, id, socket} ->
      case Enum.member?(disconnect_nodes_ids, {n, id}) do
        true ->
          session_disconnected(socket)
          []
        false ->
          [{n, id, socket}]
      end
    end)
  end

  defp session_ids_on_nodes_are_equal_to(sessions, nodes) do
    session_ids = Enum.map(sessions, fn {_, id, _} -> id end) |> Enum.sort
    Enum.all?(nodes, fn n ->
      session_ids(node_map(n)) == session_ids
    end)
  end

  defp sessions_without_node(sessions, node) do
    Enum.reject(sessions, fn {n, _, _} -> n == node end)
  end
end
